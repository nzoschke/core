package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _data_app_conf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x91\xcf\x4e\xf3\x30\x10\xc4\xef\x7e\x8a\xf9\xaa\x4f\x08\x0e\x8e\xd5\xd2\x22\x51\x89\xbe\x08\xe2\x60\x39\x4b\x31\x35\xb6\x59\x6f\x42\x91\x78\x78\x9c\xa4\xe1\x8f\xc4\x05\x89\xd3\x24\xde\xd1\x6f\x77\x67\x8b\x58\x16\xa4\x08\xee\x62\xa0\x9e\x02\x6e\x57\x97\xeb\xcd\x1d\x6c\x6c\x31\x16\xa9\x45\x9b\xdc\x81\x58\x15\x49\xf9\xbb\xf5\xdf\xe8\x55\x8a\xa9\x64\xfb\x12\x67\x45\xf0\x4f\x5e\x50\x6d\x83\x52\xab\x54\x4e\x45\xf4\xd4\xab\x38\xf6\x59\x14\x06\xba\x3b\xdc\xfc\x3f\x77\x1d\x07\xe8\x82\x07\x91\xbc\x35\x66\x79\x75\xdd\xac\x36\xeb\xe6\xa4\x26\x58\xa1\x22\xa6\x2b\xc4\xba\xb5\x62\xf1\x86\xc7\x67\x68\xc6\xa2\x29\x7e\x1f\x6d\x68\x46\xd0\xe2\xa2\x22\x6b\xff\xd4\xb1\xa3\xbf\xa0\xce\xac\x11\xec\xee\xa3\x9e\xde\x07\xa6\x70\x47\xd0\xfa\xb4\xc0\x28\xf5\xf7\xb3\xf9\xfc\x85\x9d\x69\xa9\x37\xb1\x0b\x01\xab\xdd\xd9\x52\xd1\x10\xea\xb4\xff\x1c\x49\x8d\x94\x8e\xe4\x50\x02\x51\xc6\x52\xa9\x8f\x7c\x7e\xbf\xc1\x74\xa7\xe1\x3e\xc3\x74\x7e\xaf\x33\xa7\xe3\x2b\xb4\x87\xee\x61\x7a\xcb\xa6\x96\xcc\xe4\x6a\x4a\x95\xed\x4f\x8f\x70\x29\xf6\xe9\x68\x7c\xf4\xf2\x75\xe2\xf7\x00\x00\x00\xff\xff\xdc\xca\xb4\x55\x2b\x02\x00\x00")

func data_app_conf_bytes() ([]byte, error) {
	return bindata_read(
		_data_app_conf,
		"data/app.conf",
	)
}

func data_app_conf() (*asset, error) {
	bytes, err := data_app_conf_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/app.conf", size: 555, mode: os.FileMode(420), modTime: time.Unix(1431628605, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_cloudwatch_logs_conf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8e\xb1\x0a\xc2\x40\x0c\x86\xf7\x3c\x45\x97\x8c\x9a\xbd\xe0\xe0\xe6\x22\x14\x9c\xa4\x94\x92\xd2\x58\x0a\xbd\xde\x91\x4b\x75\x28\x7d\x77\x63\x41\x70\x70\xc8\x90\xff\xfb\x42\xfe\x7a\x90\x59\x94\xa7\x06\xb2\xb1\x49\xfb\x18\x27\x29\x4e\x05\x3d\x59\x89\x5f\x79\x8a\x43\x26\x76\xc7\x0e\x3b\x07\xa8\x77\xe4\x39\x2d\xc9\x23\x35\xe2\x94\x8e\xbe\x37\xf0\x7b\xfb\x47\x00\x9f\x76\xd0\xb8\xa4\x76\xe6\xf0\x31\xd7\xf5\x5c\x55\xdb\xb6\x83\x6c\x2a\x1c\xbe\x24\xa9\x74\x31\x1a\xf4\xfe\xd3\xc6\xe0\xbd\xa2\x06\x36\x27\xd8\x13\x76\x84\xf7\x12\x2f\x25\x5e\x4b\xbc\xc1\x3b\x00\x00\xff\xff\xe9\xef\x6e\x68\xc3\x00\x00\x00")

func data_cloudwatch_logs_conf_bytes() ([]byte, error) {
	return bindata_read(
		_data_cloudwatch_logs_conf,
		"data/cloudwatch-logs.conf",
	)
}

func data_cloudwatch_logs_conf() (*asset, error) {
	bytes, err := data_cloudwatch_logs_conf_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/cloudwatch-logs.conf", size: 195, mode: os.FileMode(420), modTime: time.Unix(1431483020, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_git_restore_mtime = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x4d\x8f\x1a\x39\x10\xbd\xf7\xaf\xa8\x15\x5a\xd1\x2d\x61\xf7\x30\x3b\xda\xdd\x41\x42\xd1\x24\xe1\x90\x43\xa4\x51\xa4\x9c\x08\x07\xd3\x5d\x80\x07\xb7\xdd\x63\x57\xc3\xf0\xef\x53\xee\x0f\x06\x82\x12\x5f\x6c\x5c\xaf\xde\xab\x7a\x65\x7a\xf4\x57\xde\x04\x9f\xaf\xb5\xcd\xd1\x1e\xa0\x3e\xd1\xce\xd9\x24\x19\xc1\x8e\xa8\x9e\xe5\x79\x20\x55\xec\xdd\x01\xfd\xc6\xb8\xa3\x2c\x5c\x95\xbf\x36\x18\x48\x3b\x1b\xf2\xe9\xe3\xbf\x0f\x0f\xff\xdd\xe5\xc7\x9d\xa2\x20\x68\x87\x02\x5f\x1b\x7d\x50\x06\x2d\x09\xb7\x11\x4d\x40\xc1\x19\x95\x26\x41\xba\xc2\x20\x36\xce\x8b\xad\xa6\x7c\xfa\xcf\xfd\xff\x0f\xf7\xf7\x8f\xa3\xe1\x10\x05\x3f\x2a\x8f\x62\xed\x2c\x06\x60\xb9\xc0\x0a\x12\x3e\x35\xde\x33\x19\x94\xda\x43\xd5\x04\x82\x35\x02\xb9\x5a\x18\x3c\xa0\x01\xb7\x81\xa3\xf3\x7b\x20\x8f\x28\x99\xe1\x7b\x50\x5b\x9c\x01\x2b\x08\xcf\x35\x3a\xe6\xab\xa2\xb0\x58\x33\x35\x2c\x6b\x45\xbb\x50\x63\x11\xa4\x94\xab\x28\x78\x82\x12\x37\xaa\x31\x04\x4d\x5d\x2a\x42\x50\xc6\xc0\x46\x1b\x0c\x1c\x5d\xbc\xa9\xaa\x36\x4c\x47\x0e\x9c\x35\xa7\x01\xd3\x9e\xb9\x57\xf8\xb6\x78\xfa\xfc\x75\x01\xca\x96\x5d\x0e\x68\x0b\x32\x2f\x5d\x31\xe3\xec\xdf\xd4\xd0\xe7\x30\x28\x49\x74\x55\x3b\x4f\x10\x9a\x75\xed\x5d\x81\x21\x4c\x20\xec\x0c\xbe\x9d\x03\x27\xbe\x71\x41\xc6\xb2\x93\x24\x4a\x18\xcd\x0e\xcc\x21\x20\xa5\x59\xc2\x5e\x42\x0c\x45\xd9\x94\xb1\x52\xf9\xed\x61\x39\x9d\xad\x80\x03\xcb\x3e\x4f\x16\x8d\x67\xef\x56\xd9\x2c\x01\x5e\x7a\x33\x10\x4a\x1d\x22\x63\x1a\xcf\x59\xcc\x78\xbf\x37\xda\xee\xbb\xfb\x2e\x29\xae\x41\x5d\xaa\xb2\x4c\x07\xa8\x47\x13\xf7\x0e\x9b\xb5\x58\x06\x5d\x4a\xb0\xf4\x0d\x13\x6b\x79\xe7\x68\x12\x1b\xe7\x38\xf7\x78\x76\x8f\x13\x8f\xca\xdc\x88\xf7\x95\x8f\x25\x9b\x3a\x8e\xb8\x3e\xf3\x1a\x11\x57\x1f\xe0\xca\x2a\x7e\xb2\x69\x97\x91\x5d\xc1\xa2\x7e\x14\x8c\x3c\xad\xf0\x2d\xcb\x1f\x9b\x1d\x7e\xbf\x38\x6d\xd3\xae\x91\x88\xcf\xd8\x80\xa4\x1d\x34\x0f\xe8\x2e\x61\x5d\xb7\x7e\x89\xb3\x3a\x4f\x57\x3e\xbb\x1a\x6d\xda\x8e\x58\x86\xda\x68\x4a\xc7\x0c\x83\xf8\xe7\x29\x76\xca\x6e\xb1\x04\x21\x6a\x8f\x44\xa7\xf9\xdf\x8a\xeb\x9e\xdc\x54\x76\xd1\x29\x95\xae\xa1\xf9\x25\xfd\x97\xe7\x45\xf7\x2a\x78\x80\x6d\x7b\x5d\x11\xb2\x83\x76\x6d\xb6\xa1\x79\xbb\xf1\xbd\xd7\x75\x9a\x0d\x0f\xc3\x3a\x6a\xef\x67\x50\x38\x4b\xda\x36\x98\x0c\xa1\x1e\xae\x3c\x85\xa3\x66\x0f\xc6\xb3\xf1\x2f\x6f\xe3\xcc\xd9\xf5\xf5\x83\xab\x5f\x8a\xe9\x2a\xb9\x18\xdf\xa5\xe9\xd1\xdd\x6b\xdf\xcf\x9e\xf7\xa3\x6b\x3d\xbd\x42\x8c\x6a\xaf\xf9\x4b\xd0\x7a\xdc\x79\x7e\x15\xe6\xb9\x34\x31\xd4\x66\x4e\x20\xed\x71\xed\x76\x7e\x9c\x01\xdf\x55\x87\x61\x19\x67\xb7\x69\x2c\x3e\xeb\xfa\x1d\xc1\xd3\xf0\x15\xe0\xff\xa9\xc5\x0f\x97\x06\xdd\x16\xbf\xf6\xa8\xf6\xc9\xcf\x00\x00\x00\xff\xff\xd5\xa9\x9e\x5b\x46\x05\x00\x00")

func data_git_restore_mtime_bytes() ([]byte, error) {
	return bindata_read(
		_data_git_restore_mtime,
		"data/git-restore-mtime",
	)
}

func data_git_restore_mtime() (*asset, error) {
	bytes, err := data_git_restore_mtime_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/git-restore-mtime", size: 1350, mode: os.FileMode(493), modTime: time.Unix(1433182975, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_netrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\x4c\xce\xc8\xcc\x4b\x55\x48\xcf\x2c\xc9\x28\x4d\xd2\x4b\xce\xcf\x55\xc8\xc9\x4f\xcf\xcc\x53\x48\xce\xcf\x2b\xcb\xaf\xd0\x4f\x2a\xcd\xcc\x49\x51\x28\x48\x2c\x2e\x2e\xcf\x2f\x4a\x51\xa8\xae\x76\xf7\x0c\xf1\x08\x75\x8a\x0f\xf1\xf7\x76\xf5\xab\xad\x05\x04\x00\x00\xff\xff\xb8\x71\x2e\x98\x3f\x00\x00\x00")

func data_netrc_bytes() ([]byte, error) {
	return bindata_read(
		_data_netrc,
		"data/netrc",
	)
}

func data_netrc() (*asset, error) {
	bytes, err := data_netrc_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/netrc", size: 63, mode: os.FileMode(420), modTime: time.Unix(1433182975, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_packer_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x95\x4b\x6f\xda\x40\x10\xc7\xef\x7c\x8a\x91\x2f\xb9\x60\xac\xb6\x52\x55\xe5\xe6\x22\xab\xca\x21\x49\x85\xfb\x38\x34\x91\xb5\xac\x07\x58\x61\xef\xae\xf6\x41\x93\x5a\xfe\xee\xdd\xf5\x03\x8c\x03\x55\xd5\xa0\x5e\x40\xcc\xfc\xbc\x33\xff\xff\xcc\x9a\x6a\x02\x10\xe4\xa8\xa9\x62\xd2\x30\xc1\x83\x6b\x08\xe6\x82\xef\xc4\x13\xc4\x52\x06\x53\x9f\xde\x11\xc5\xc8\xb2\x40\xed\x92\x9e\x77\xa1\xbb\xf8\x36\x71\xbf\xb8\x2d\x8a\x69\x1b\x49\xef\xbf\x2e\xe6\xa3\xd8\xc7\x38\x4d\xb2\xf8\xf6\xc6\x1f\x4a\x4a\x16\x7e\x78\x4f\x49\xfe\x0e\x31\xe8\xf2\xf1\xf7\x34\x5b\x24\x9f\x6e\xee\xef\x3c\x61\x75\x88\x44\x9b\xf0\xcd\x30\x1d\xcf\xe7\x49\x9a\xfa\x74\x55\x21\xdf\xc1\xc3\x20\xfa\x10\xd4\xf5\x90\x4d\x93\xf9\x22\xf9\x32\x66\xdb\x68\xc3\x3a\xb4\x6e\x14\x2d\x2d\x2b\x72\x54\x5e\xd0\x8f\xe6\xf9\x56\x96\xcb\x98\x67\x89\x6d\xbb\xe4\x97\xe0\x21\x2e\x75\x57\xc1\xe5\x14\xae\x3b\x87\xaa\xca\x6a\x54\x5d\x81\x56\xc1\xa0\x19\x87\x12\x4a\x51\xeb\x6c\x8b\xcf\x2f\xf0\x17\xbd\x3b\x5c\x23\x55\x68\x4e\xe2\x83\xf6\x0f\xb8\xb0\x8a\x62\xe6\x2c\x3d\xc2\x7b\xbb\x8f\x61\xc6\xb5\x21\xdc\xe1\xbd\x34\xf3\x76\x56\x32\xaa\xc4\xe0\x3c\xbd\xc9\xfc\x19\x9c\x94\x0d\x61\x97\x96\x1b\x3b\x50\x53\xb2\xac\xcf\xed\xab\xf9\x15\xf0\x95\xc2\xaa\x32\xac\x44\x57\xa4\x94\xc3\xba\xca\xf2\xcc\x90\xf5\x61\x69\xda\xc5\x39\x7b\x4c\x37\x93\xa0\x63\xeb\x49\xff\xf9\xd8\x8c\x4c\x2a\xb1\x63\xda\xf9\xff\xc7\xb1\xe9\x0d\x16\xc5\xa1\x07\x7c\x42\x6a\x0d\x66\x54\x94\x25\xe1\xb9\x27\xfc\x62\x54\x15\xcc\xbe\x11\xa5\xa1\xae\x41\xdb\x5c\x40\x98\x40\x98\x82\xde\xc0\x95\x4f\x7d\x26\x66\xe3\x52\x57\x43\x0f\x0b\xc6\x71\x5f\xb6\x89\x95\xdb\x9c\x29\x88\x9a\xb6\xf7\xa4\x8b\xd3\x8d\xf8\xc9\xa1\xb5\xf0\xba\xfd\xea\xa9\x0e\x7a\x6c\xa5\x4d\x4f\x4b\x58\xb1\x02\xc7\xa3\x3e\x72\xac\xbd\x69\xde\xb3\xe8\xc0\xb9\x2b\x6c\x18\x27\xfd\x15\x1e\x16\x3c\x57\x68\xe4\xd5\x29\x8d\x1a\x0d\x84\x78\xa4\x2e\x3f\x21\x39\xb2\x5a\x45\x85\xa0\xa4\x88\x96\x8c\x47\xb9\xa0\x5b\x54\xa1\x33\x5d\x0a\x8d\x10\x4a\x20\x52\xc2\xbf\x3d\x25\xdd\xdb\xe4\xef\x7c\xfb\x8f\xa3\x57\x25\x84\x6a\x75\x91\xa9\x3a\x8d\x33\x2a\xf8\xea\xfc\x24\x4d\x29\xa3\x3d\xf5\x4a\x07\x2e\xb3\xf8\x3b\x38\x6a\x0a\x22\x34\x34\x62\x9c\x99\x51\x9f\xaf\x9f\xd8\x45\xfa\x6d\x17\xab\xd9\x24\xa0\xcd\x5f\x5b\x44\xd6\xc8\xcd\x70\x17\x4f\x30\x5e\xd0\x48\x87\x7f\x19\x4d\xea\xc9\xef\x00\x00\x00\xff\xff\x5e\x1f\x04\x09\x34\x07\x00\x00")

func data_packer_json_bytes() ([]byte, error) {
	return bindata_read(
		_data_packer_json,
		"data/packer.json",
	)
}

func data_packer_json() (*asset, error) {
	bytes, err := data_packer_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/packer.json", size: 1844, mode: os.FileMode(420), modTime: time.Unix(1433182975, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/app.conf": data_app_conf,
	"data/cloudwatch-logs.conf": data_cloudwatch_logs_conf,
	"data/git-restore-mtime": data_git_restore_mtime,
	"data/netrc": data_netrc,
	"data/packer.json": data_packer_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"data": &_bintree_t{nil, map[string]*_bintree_t{
		"app.conf": &_bintree_t{data_app_conf, map[string]*_bintree_t{
		}},
		"cloudwatch-logs.conf": &_bintree_t{data_cloudwatch_logs_conf, map[string]*_bintree_t{
		}},
		"git-restore-mtime": &_bintree_t{data_git_restore_mtime, map[string]*_bintree_t{
		}},
		"netrc": &_bintree_t{data_netrc, map[string]*_bintree_t{
		}},
		"packer.json": &_bintree_t{data_packer_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

